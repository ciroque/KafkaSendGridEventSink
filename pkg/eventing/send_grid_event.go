// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     SendGridEvent.avsc
 */
package eventing

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type SendGridEvent struct {

	
	
		Email string
	

	
	
		Event string
	

	
	
		Event_timestamp int32
	

	
	
		Smtp_id string
	

	
	
		Useragent string
	

	
	
		Ip string
	

	
	
		Sg_event_id string
	

	
	
		Sg_message_id string
	

	
	
		Reason string
	

	
	
		Status string
	

	
	
		Response string
	

	
	
		Tls bool
	

	
	
		Url string
	

	
	
		Urloffset string
	

	
	
		Attempt int32
	

	
	
		Category string
	

	
	
		Type string
	

}

func NewSendGridEvent() (*SendGridEvent) {
	return &SendGridEvent{}
}

func DeserializeSendGridEvent(r io.Reader) (*SendGridEvent, error) {
	t := NewSendGridEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeSendGridEventFromSchema(r io.Reader, schema string) (*SendGridEvent, error) {
	t := NewSendGridEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeSendGridEvent(r *SendGridEvent, w io.Writer) error {
	var err error
	
	err = vm.WriteString( r.Email, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Event, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.Event_timestamp, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Smtp_id, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Useragent, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Ip, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Sg_event_id, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Sg_message_id, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Reason, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Status, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Response, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteBool( r.Tls, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Url, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Urloffset, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.Attempt, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Category, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Type, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *SendGridEvent) Serialize(w io.Writer) error {
	return writeSendGridEvent(r, w)
}

func (r *SendGridEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"event\",\"type\":\"string\"},{\"name\":\"event_timestamp\",\"type\":\"int\"},{\"name\":\"smtp_id\",\"type\":\"string\"},{\"name\":\"useragent\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"sg_event_id\",\"type\":\"string\"},{\"name\":\"sg_message_id\",\"type\":\"string\"},{\"name\":\"reason\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"response\",\"type\":\"string\"},{\"name\":\"tls\",\"type\":\"boolean\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"urloffset\",\"type\":\"string\"},{\"name\":\"attempt\",\"type\":\"int\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}],\"name\":\"SendGridEvent\",\"namespace\":\"xyz.atavachron\",\"type\":\"record\"}"
}

func (r *SendGridEvent) SchemaName() string {
	return "xyz.atavachron.SendGridEvent"
}

func (_ *SendGridEvent) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetInt(v int32) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetLong(v int64) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetString(v string) { panic("Unsupported operation") }
func (_ *SendGridEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SendGridEvent) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.String)(&r.Email)
		
	
	case 1:
		
		
			return (*types.String)(&r.Event)
		
	
	case 2:
		
		
			return (*types.Int)(&r.Event_timestamp)
		
	
	case 3:
		
		
			return (*types.String)(&r.Smtp_id)
		
	
	case 4:
		
		
			return (*types.String)(&r.Useragent)
		
	
	case 5:
		
		
			return (*types.String)(&r.Ip)
		
	
	case 6:
		
		
			return (*types.String)(&r.Sg_event_id)
		
	
	case 7:
		
		
			return (*types.String)(&r.Sg_message_id)
		
	
	case 8:
		
		
			return (*types.String)(&r.Reason)
		
	
	case 9:
		
		
			return (*types.String)(&r.Status)
		
	
	case 10:
		
		
			return (*types.String)(&r.Response)
		
	
	case 11:
		
		
			return (*types.Boolean)(&r.Tls)
		
	
	case 12:
		
		
			return (*types.String)(&r.Url)
		
	
	case 13:
		
		
			return (*types.String)(&r.Urloffset)
		
	
	case 14:
		
		
			return (*types.Int)(&r.Attempt)
		
	
	case 15:
		
		
			return (*types.String)(&r.Category)
		
	
	case 16:
		
		
			return (*types.String)(&r.Type)
		
	
	}
	panic("Unknown field index")
}

func (r *SendGridEvent) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *SendGridEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *SendGridEvent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *SendGridEvent) Finalize() { }

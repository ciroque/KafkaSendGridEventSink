// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     SendGridEvent.avsc
 */
package eventing

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type SendGridEvent struct {
	Email string

	Timestamp int64

	Event string

	Smtp_id string

	Useragent string

	Ip string

	Sg_event_id string

	Sg_message_id string

	Reason string

	Status string

	Response string

	Tls bool

	Url string

	Urloffset string

	Attempt string

	Category string

	Type string

	Asm_group_id int64
}

func NewSendGridEvent() *SendGridEvent {
	return &SendGridEvent{}
}

func DeserializeSendGridEvent(r io.Reader) (*SendGridEvent, error) {
	t := NewSendGridEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeSendGridEventFromSchema(r io.Reader, schema string) (*SendGridEvent, error) {
	t := NewSendGridEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeSendGridEvent(r *SendGridEvent, w io.Writer) error {
	var err error

	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}

	err = vm.WriteLong(r.Timestamp, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Event, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Smtp_id, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Useragent, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Ip, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Sg_event_id, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Sg_message_id, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Reason, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Response, w)
	if err != nil {
		return err
	}

	err = vm.WriteBool(r.Tls, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Url, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Urloffset, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Attempt, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Category, w)
	if err != nil {
		return err
	}

	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}

	err = vm.WriteLong(r.Asm_group_id, w)
	if err != nil {
		return err
	}

	return err
}

func (r *SendGridEvent) Serialize(w io.Writer) error {
	return writeSendGridEvent(r, w)
}

func (r *SendGridEvent) Schema() string {
	return "{\"fields\":[{\"default\":\"\",\"name\":\"email\",\"type\":\"string\"},{\"default\":0,\"name\":\"timestamp\",\"type\":\"long\"},{\"default\":\"\",\"name\":\"event\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"smtp_id\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"useragent\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"ip\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"sg_event_id\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"sg_message_id\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"reason\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"status\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"response\",\"type\":\"string\"},{\"default\":false,\"name\":\"tls\",\"type\":\"boolean\"},{\"default\":\"\",\"name\":\"url\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"urloffset\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"attempt\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"category\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"type\",\"type\":\"string\"},{\"default\":0,\"name\":\"asm_group_id\",\"type\":\"long\"}],\"name\":\"SendGridEvent\",\"namespace\":\"xyz.atavachron\",\"type\":\"record\"}"
}

func (r *SendGridEvent) SchemaName() string {
	return "xyz.atavachron.SendGridEvent"
}

func (_ *SendGridEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *SendGridEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *SendGridEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *SendGridEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *SendGridEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *SendGridEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *SendGridEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ *SendGridEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SendGridEvent) Get(i int) types.Field {
	switch i {

	case 0:

		return (*types.String)(&r.Email)

	case 1:

		return (*types.Long)(&r.Timestamp)

	case 2:

		return (*types.String)(&r.Event)

	case 3:

		return (*types.String)(&r.Smtp_id)

	case 4:

		return (*types.String)(&r.Useragent)

	case 5:

		return (*types.String)(&r.Ip)

	case 6:

		return (*types.String)(&r.Sg_event_id)

	case 7:

		return (*types.String)(&r.Sg_message_id)

	case 8:

		return (*types.String)(&r.Reason)

	case 9:

		return (*types.String)(&r.Status)

	case 10:

		return (*types.String)(&r.Response)

	case 11:

		return (*types.Boolean)(&r.Tls)

	case 12:

		return (*types.String)(&r.Url)

	case 13:

		return (*types.String)(&r.Urloffset)

	case 14:

		return (*types.String)(&r.Attempt)

	case 15:

		return (*types.String)(&r.Category)

	case 16:

		return (*types.String)(&r.Type)

	case 17:

		return (*types.Long)(&r.Asm_group_id)

	}
	panic("Unknown field index")
}

func (r *SendGridEvent) SetDefault(i int) {
	switch i {

	case 0:
		r.Email = ""
		return

	case 1:
		r.Timestamp = 0
		return

	case 2:
		r.Event = ""
		return

	case 3:
		r.Smtp_id = ""
		return

	case 4:
		r.Useragent = ""
		return

	case 5:
		r.Ip = ""
		return

	case 6:
		r.Sg_event_id = ""
		return

	case 7:
		r.Sg_message_id = ""
		return

	case 8:
		r.Reason = ""
		return

	case 9:
		r.Status = ""
		return

	case 10:
		r.Response = ""
		return

	case 11:
		r.Tls = false
		return

	case 12:
		r.Url = ""
		return

	case 13:
		r.Urloffset = ""
		return

	case 14:
		r.Attempt = ""
		return

	case 15:
		r.Category = ""
		return

	case 16:
		r.Type = ""
		return

	case 17:
		r.Asm_group_id = 0
		return

	}
	panic("Unknown field index")
}

func (_ *SendGridEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *SendGridEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *SendGridEvent) Finalize()                        {}
